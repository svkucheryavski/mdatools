% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plsda.R
\name{plsda}
\alias{plsda}
\title{Partial Least Squares Discriminant Analysis}
\usage{
plsda(x, c, ncomp = 15, center = T, scale = F, cv = NULL,
  x.test = NULL, c.test = NULL, method = "simpls", alpha = 0.05,
  coeffs.ci = NULL, coeffs.alpha = 0.1, info = "", light = F,
  ncomp.selcrit = "min")
}
\arguments{
\item{x}{matrix with predictors.}

\item{c}{vector with class values (either class number or class name as text for each object).}

\item{ncomp}{maximum number of components to calculate.}

\item{center}{logical, center or not predictors and response values.}

\item{scale}{logical, scale (standardize) or not predictors and response values.}

\item{cv}{number of segments for cross-validation (if cv = 1, full cross-validation will be used).}

\item{x.test}{matrix with predictors for test set.}

\item{c.test}{vector with reference class values for test set (same format as calibration values).}

\item{method}{method for calculating PLS model.}

\item{alpha}{significance level for calculating statistical limits for residuals.}

\item{coeffs.ci}{method to calculate p-values and confidence intervals for regression coefficients (so far only 
jack-knifing is availavle: \code{='jk'}).}

\item{coeffs.alpha}{significance level for calculating confidence intervals for regression coefficients.}

\item{info}{short text with information about the model.}

\item{light}{run normal or light (faster) version of PLS without calculationg some performance statistics.}

\item{ncomp.selcrit}{criterion for selecting optimal number of components (\code{'min'} for first local minimum of 
RMSECV and \code{'wold'} for Wold's rule.)}
}
\value{
Returns an object of \code{plsda} class with following fields (most inherited from class 
\code{pls}):
\item{ncomp }{number of components included to the model.} 
\item{ncomp.selected }{selected (optimal) number of components.} 
\item{xloadings }{matrix with loading values for x decomposition.} 
\item{yloadings }{matrix with loading values for y (c)  decomposition.} 
\item{weights }{matrix with PLS weights.} 
\item{coeffs }{matrix with regression coefficients calculated for each component.}   
\item{info }{information about the model, provided by user when build the model.} 
\item{calres }{an object of class \code{\link{plsdares}} with PLS-DA results for a calibration 
data.} 
\item{testres }{an object of class \code{\link{plsdares}} with PLS-DA results for a test data, 
if it was provided.} 
\item{cvres }{an object of class \code{\link{plsdares}} with PLS-DA results for cross-validation,
if this option was chosen.}
}
\description{
\code{plsda} is used to calibrate, validate and use of partial least squares discrimination 
analysis (PLS-DA) model.
}
\details{
The \code{plsda} class is based on \code{pls} with extra functions and plots covering 
classification functionality. All plots for \code{pls} can be used. E.g. of you want to see the 
real predicted values (y in PLS) instead of classes use \code{plotPredictions.pls(model)} instead
of \code{plotPredictions(model)}.

Calculation of confidence intervals and p-values for regression coefficients are available
only by jack-knifing so far. See help for \code{\link{regcoeffs}} objects for details.
}
\examples{
### Examples for PLS-DA model class

library(mdatools)

## 1. Make a PLS-DA model with full cross-validation and show model overview

# make a calibration set from iris data (3 classes)
# use names of classes as class vector
x.cal = iris[seq(1, nrow(iris), 2), 1:4] 
c.cal = iris[seq(1, nrow(iris), 2), 5]

model = plsda(x.cal, c.cal, ncomp = 3, cv = 1, info = 'IRIS data example')
model = selectCompNum(model, 1)

# show summary and basic model plots
# misclassification will be shown only for first class
summary(model)
plot(model)

# summary and model plots for second class
summary(model, nc = 2)
plot(model, nc = 2)

# summary and model plot for specific class and number of components
summary(model, nc = 3, ncomp = 3)
plot(model, nc = 3, ncomp = 3)

## 2. Show performance plots for a model
par(mfrow = c(2, 2))
plotSpecificity(model)
plotSensitivity(model)
plotMisclassified(model)
plotMisclassified(model, nc = 2)
par(mfrow = c(1, 1))

## 3. Show both class and y values predictions
par(mfrow = c(2, 2))
plotPredictions(model)
plotPredictions(model, res = 'calres', ncomp = 2, nc = 2)
plotPredictions(structure(model, class = "pls"))
plotPredictions(structure(model, class = "pls"), ncomp = 2, ny = 2)
par(mfrow = c(1, 1))

## 4. All plots from ordinary PLS can be used, e.g.:
par(mfrow = c(2, 2))
plotXYScores(model)
plotYVariance(model)
plotXResiduals(model)
plotRegcoeffs(model, ny = 2)
par(mfrow = c(1, 1))

}
\author{
Sergey Kucheryavskiy (svkucheryavski@gmail.com)
}
\seealso{
Specific methods for \code{plsda} class:
\tabular{ll}{
 \code{print.plsda} \tab prints information about a \code{pls} object.\cr
 \code{summary.plsda} \tab shows performance statistics for the model.\cr
 \code{plot.plsda} \tab shows plot overview of the model.\cr
 \code{\link{predict.plsda}} \tab applies PLS-DA model to a new data.\cr
}

Methods, inherited from \code{classmodel} class:
\tabular{ll}{
 \code{\link{plotPredictions.classmodel}} \tab shows plot with predicted values.\cr
 \code{\link{plotSensitivity.classmodel}} \tab shows sensitivity plot.\cr
 \code{\link{plotSpecificity.classmodel}} \tab shows specificity plot.\cr
 \code{\link{plotMisclassified.classmodel}} \tab shows misclassified ratio plot.\cr
}

See also methods for class \code{\link{pls}}.
}

